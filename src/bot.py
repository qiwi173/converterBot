from __future__ import annotations

import asyncio
from typing import Optional

from aiogram import Bot, Dispatcher, F, Router
from aiogram.filters import Command
from aiogram.types import Message, InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

from .config import get_settings
from .rates import RatesService
from .parser import parse_convert, parse_alert
from .db import Database
from .scheduler import run_notifier
from .keyboards import get_main_keyboard, get_currency_keyboard, get_operator_keyboard


HELP_TEXT = (
    "üîÑ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç:</b>\n"
    "‚Ä¢ 100 USD to EUR ‚Äî –¥–æ–ª–ª–∞—Ä—ã –≤ –µ–≤—Ä–æ\n"
    "‚Ä¢ 50 EUR to RUB ‚Äî –µ–≤—Ä–æ –≤ —Ä—É–±–ª–∏\n"
    "‚Ä¢ 1000 RUB to UAH ‚Äî —Ä—É–±–ª–∏ –≤ –≥—Ä–∏–≤–Ω—ã\n"
    "‚Ä¢ 25 GBP to JPY ‚Äî —Ñ—É–Ω—Ç—ã –≤ –π–µ–Ω—ã\n"
    "‚Ä¢ 100 CAD to AUD ‚Äî –∫–∞–Ω–∞–¥—Å–∫–∏–µ –¥–æ–ª–ª–∞—Ä—ã –≤ –∞–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–µ\n\n"
    
    "ü™ô <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:</b>\n"
    "‚Ä¢ 1 BTC to USD ‚Äî –±–∏—Ç–∫–æ–∏–Ω –≤ –¥–æ–ª–ª–∞—Ä—ã\n"
    "‚Ä¢ 10 ETH to EUR ‚Äî —ç—Ñ–∏—Ä–∏—É–º –≤ –µ–≤—Ä–æ\n"
    "‚Ä¢ 1000 USDT to RUB ‚Äî —Ç–µ–∑–µ—Ä –≤ —Ä—É–±–ª–∏\n"
    "‚Ä¢ 5 SOL to USD ‚Äî —Å–æ–ª–∞–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä—ã\n"
    "‚Ä¢ 0.5 ETH to BTC ‚Äî —ç—Ñ–∏—Ä–∏—É–º –≤ –±–∏—Ç–∫–æ–∏–Ω\n\n"
    
    "üîî <b>–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫—É—Ä—Å—ã:</b>\n"
    "‚Ä¢ —É–≤–µ–¥–æ–º–∏, –µ—Å–ª–∏ BTC &gt; 50000 to USD\n"
    "‚Ä¢ alert –µ—Å–ª–∏ ETH &lt; 3000 to USD\n"
    "‚Ä¢ notify –∫–æ–≥–¥–∞ SOL &gt; 100 to USD\n"
    "‚Ä¢ —É–≤–µ–¥–æ–º–∏, –µ—Å–ª–∏ RUB &gt; 80 to USD\n"
    "‚Ä¢ alert –µ—Å–ª–∏ EUR &lt; 0.8 to USD\n\n"
    
    "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
    "‚Ä¢ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
    "‚Ä¢ /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
    "‚Ä¢ /subs ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n"
    "‚Ä¢ /unsub BTC USD ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n"
    
    "üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n"
    "–§–∏–∞—Ç: USD, EUR, GBP, JPY, CHF, CNY, AUD, CAD, RUB, UAH, KZT\n"
    "–ö—Ä–∏–ø—Ç–∞: BTC, ETH, USDT, BNB, XRP, SOL, TON, DOGE, TRX"
)


async def create_app():
    settings = get_settings()
    bot = Bot(token=settings.bot_token)
    dp = Dispatcher()
    db = Database(settings.database_path)
    await db.init()
    rates = RatesService(user_agent=settings.user_agent)

    @dp.message(Command("start"))
    async def start_handler(message: Message):
        welcome_text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø QuickConverterBot</b>\n\n"
            "–Ø –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∞–ª—é—Ç—ã –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            "üí° <b>–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:</b>"
        )
        await message.answer(welcome_text, parse_mode="HTML", reply_markup=get_main_keyboard())

    @dp.message(Command("help"))
    async def help_handler(message: Message):
        await message.answer(HELP_TEXT, parse_mode="HTML")

    @dp.message(Command("subs"))
    async def list_subs(message: Message):
        items = await db.list_subscriptions(message.from_user.id)
        if not items:
            await message.answer("üì≠ –£ —Ç–µ–±—è –ø–æ–∫–∞ –Ω–µ—Ç –ø–æ–¥–ø–∏—Å–æ–∫.\n\nüí° –°–æ–∑–¥–∞–π –ø–µ—Ä–≤—É—é –ø–æ–¥–ø–∏—Å–∫—É –Ω–∞ –∫—É—Ä—Å –≤–∞–ª—é—Ç—ã!", reply_markup=get_main_keyboard())
            return
        
        lines = ["üìã <b>–¢–≤–æ–∏ –ø–æ–¥–ø–∏—Å–∫–∏:</b>\n"]
        for i, x in enumerate(items, 1):
            lines.append(f"{i}. {x['base']}/{x['quote']} {x['operator']} {x['threshold']}")
        
        text = "\n".join(lines)
        await message.answer(text, parse_mode="HTML", reply_markup=get_main_keyboard())

    @dp.message(Command("unsub"))
    async def unsub(message: Message):
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer("‚ùå –ò—Å–ø–æ–ª—å–∑—É–π: <code>/unsub BTC USD</code>", parse_mode="HTML")
            return
        
        base, quote = parts[1].upper(), parts[2].upper()
        removed = await db.remove_subscription(message.from_user.id, base, quote)
        
        if removed:
            await message.answer(f"‚úÖ –ü–æ–¥–ø–∏—Å–∫–∞ {base}/{quote} —É–¥–∞–ª–µ–Ω–∞!", reply_markup=get_main_keyboard())
        else:
            await message.answer(f"‚ùå –ü–æ–¥–ø–∏—Å–∫–∞ {base}/{quote} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.", reply_markup=get_main_keyboard())

    @dp.callback_query(F.data == "main_menu")
    async def main_menu_handler(callback: CallbackQuery):
        await callback.message.edit_text(
            "üëã <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é QuickConverterBot</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
        await callback.answer()

    @dp.callback_query(F.data == "convert")
    async def convert_handler(callback: CallbackQuery):
        await callback.message.edit_text(
            "üîÑ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É:",
            parse_mode="HTML",
            reply_markup=get_currency_keyboard()
        )
        await callback.answer()

    @dp.callback_query(F.data == "subscriptions")
    async def subscriptions_handler(callback: CallbackQuery):
        await callback.message.edit_text(
            "üîî <b>–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫—É—Ä—Å—ã</b>\n\n"
            "–í—ã–±–µ—Ä–∏ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:",
            parse_mode="HTML",
            reply_markup=get_currency_keyboard()
        )
        await callback.answer()

    @dp.callback_query(F.data == "help")
    async def help_callback_handler(callback: CallbackQuery):
        await callback.message.edit_text(
            HELP_TEXT,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]])
        )
        await callback.answer()

    @dp.callback_query(F.data == "about")
    async def about_handler(callback: CallbackQuery):
        about_text = (
            "‚ÑπÔ∏è <b>–û QuickConverterBot</b>\n\n"
            "üöÄ <b>–í–µ—Ä—Å–∏—è:</b> 2.0\n"
            "üìÖ <b>–û–±–Ω–æ–≤–ª–µ–Ω–æ:</b> –ê–≤–≥—É—Å—Ç 2024\n\n"
            "‚ú® <b>–í–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è 11+ —Ñ–∏–∞—Ç –≤–∞–ª—é—Ç\n"
            "‚Ä¢ –ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è 9+ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç\n"
            "‚Ä¢ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –∫—É—Ä—Å–∞—Ö\n"
            "‚Ä¢ –ö—Ä–∞—Å–∏–≤—ã–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å\n\n"
            "üîß <b>–¢–µ—Ö–Ω–æ–ª–æ–≥–∏–∏:</b>\n"
            "‚Ä¢ Python + aiogram 3.x\n"
            "‚Ä¢ SQLite –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö\n"
            "‚Ä¢ –†–µ–∞–ª—å–Ω—ã–µ API –∫—É—Ä—Å–æ–≤\n\n"
            "üíª <b>–†–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫:</b> @qiwi173"
        )
        
        await callback.message.edit_text(
            about_text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]])
        )
        await callback.answer()

    @dp.callback_query(F.data.startswith("quick_"))
    async def quick_convert_handler(callback: CallbackQuery):
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –±—ã—Å—Ç—Ä—ã—Ö –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–π
        data = callback.data
        if data == "quick_usd_eur":
            rate = await rates.get_rate("USD", "EUR")
            if rate:
                result = 100 * rate
                text = f"üí± <b>100 USD ‚Üí EUR</b>\n\nüíµ 100 USD = {result:.2f} EUR\nüìä –ö—É—Ä—Å: 1 USD = {rate:.4f} EUR"
            else:
                text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å USD/EUR"
        
        elif data == "quick_btc_usd":
            rate = await rates.get_rate("BTC", "USD")
            if rate:
                result = 1 * rate
                text = f"üí± <b>1 BTC ‚Üí USD</b>\n\n‚Çø 1 BTC = ${result:,.2f}\nüìä –ö—É—Ä—Å: 1 BTC = ${rate:,.2f}"
            else:
                text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å BTC/USD"
        
        elif data == "quick_eth_usd":
            rate = await rates.get_rate("ETH", "USD")
            if rate:
                result = 1 * rate
                text = f"üí± <b>1 ETH ‚Üí USD</b>\n\n‚ö° 1 ETH = ${result:,.2f}\nüìä –ö—É—Ä—Å: 1 ETH = ${rate:,.2f}"
            else:
                text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å ETH/USD"
        
        elif data == "quick_sol_usd":
            rate = await rates.get_rate("SOL", "USD")
            if rate:
                result = 1 * rate
                text = f"üí± <b>1 SOL ‚Üí USD</b>\n\nüíé 1 SOL = ${result:.2f}\nüìä –ö—É—Ä—Å: 1 SOL = ${rate:.4f}"
            else:
                text = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å SOL/USD"
        
        else:
            text = "‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –±—ã—Å—Ç—Ä–∞—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è"
        
        await callback.message.edit_text(
            text,
            parse_mode="HTML",
            reply_markup=InlineKeyboardMarkup(inline_keyboard=[[
                InlineKeyboardButton(text="üîÑ –ï—â–µ —Ä–∞–∑", callback_data=data),
                InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="main_menu")
            ]])
        )
        await callback.answer()

    @dp.callback_query(F.data.startswith("currency_"))
    async def currency_handler(callback: CallbackQuery):
        user_id = callback.from_user.id
        currency = callback.data.split("_")[1]

        state = user_states.get(user_id, {"step": "base"})
        if state["step"] == "base":
            user_states[user_id] = {"step": "quote", "base": currency}
            await callback.message.edit_text(
                f"üîÑ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {currency}</b>\n\n"
                f"–¢–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ –≤–∞–ª—é—Ç—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
                parse_mode="HTML",
                reply_markup=get_currency_keyboard()
            )
        elif state["step"] == "quote":
            base = state["base"]
            quote = currency
            if base == quote:
                await callback.answer("–í—ã–±–µ—Ä–∏ –¥—Ä—É–≥—É—é –≤–∞–ª—é—Ç—É!", show_alert=True)
                return
            user_states[user_id] = {"step": "amount", "base": base, "quote": quote}
            await callback.message.edit_text(
                f"üîÑ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è {base} ‚Üí {quote}</b>\n\n"
                f"–í–≤–µ–¥–∏ —Å—É–º–º—É –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
                parse_mode="HTML"
            )
        else:
            user_states[user_id] = {"step": "base"}
            await callback.message.edit_text(
                "üîÑ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç</b>\n\n"
                "–í—ã–±–µ—Ä–∏ –±–∞–∑–æ–≤—É—é –≤–∞–ª—é—Ç—É:",
                parse_mode="HTML",
                reply_markup=get_currency_keyboard()
            )
        await callback.answer()

    @dp.message(F.text)
    async def text_handler(message: Message):
        user_id = message.from_user.id
        state = user_states.get(user_id)
        if state and state.get("step") == "amount":
            try:
                amount = float(message.text.replace(",", "."))
            except ValueError:
                await message.answer("‚ùå –í–≤–µ–¥–∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é —Å—É–º–º—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, 100.5)")
                return
            base = state["base"]
            quote = state["quote"]
            rate = await rates.get_rate(base, quote)
            if rate is None:
                await message.answer("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —Å–µ–π—á–∞—Å.")
                return
            result = amount * rate
            await message.answer(
                f"üí± <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üìä <b>–ö—É—Ä—Å:</b> 1 {base} = {rate:.6g} {quote}\n"
                f"üíµ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {amount} {base} = {result:.6g} {quote}",
                parse_mode="HTML",
                reply_markup=get_main_keyboard()
            )
            user_states[user_id] = {"step": "base"}
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –ø–æ–¥–ø–∏—Å–∫—É
        alert = parse_alert(message.text)
        if alert:
            await db.add_subscription(
                user_id=message.from_user.id,
                base=alert.base,
                quote=alert.quote,
                operator=alert.operator,
                threshold=alert.value,
            )
            
            # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–π –ø–æ–¥–ø–∏—Å–∫–µ
            success_text = (
                f"‚úÖ <b>–ü–æ–¥–ø–∏—Å–∫–∞ —Å–æ–∑–¥–∞–Ω–∞!</b>\n\n"
                f"üîî <b>–£–≤–µ–¥–æ–º–ª—é –∫–æ–≥–¥–∞:</b>\n"
                f"{alert.base}/{alert.quote} {alert.operator} {alert.value}\n\n"
                f"üí° <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ:</b>\n"
                f"‚Ä¢ –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –≤—Å–µ: /subs\n"
                f"‚Ä¢ –£–¥–∞–ª–∏—Ç—å: /unsub {alert.base} {alert.quote}"
            )
            
            await message.answer(
                success_text, 
                parse_mode="HTML",
                reply_markup=get_main_keyboard()
            )
            return

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—é
        cq = parse_convert(message.text)
        if cq:
            rate = await rates.get_rate(cq.base, cq.quote)
            if rate is None:
                await message.answer(
                    "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —Å–µ–π—á–∞—Å.\n\nüí° –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ –≤—ã—à–µ!",
                    reply_markup=get_main_keyboard()
                )
                return
            
            result = cq.amount * rate
            
            # –ö—Ä–∞—Å–∏–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏
            convert_text = (
                f"üí± <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!</b>\n\n"
                f"üìä <b>–ö—É—Ä—Å:</b> 1 {cq.base} = {rate:.6g} {cq.quote}\n"
                f"üíµ <b>–†–µ–∑—É–ª—å—Ç–∞—Ç:</b> {cq.amount} {cq.base} = {result:.6g} {cq.quote}\n\n"
                f"üîÑ <b>–•–æ—á–µ—à—å –µ—â–µ?</b>"
            )
            
            await message.answer(
                convert_text,
                parse_mode="HTML",
                reply_markup=get_main_keyboard()
            )
            return

        # –ù–µ–ø–æ–Ω—è—Ç–Ω—ã–π –∑–∞–ø—Ä–æ—Å
        await message.answer(
            "‚ùì <b>–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å</b>\n\n"
            "üí° <b>–ü—Ä–∏–º–µ—Ä—ã:</b>\n"
            "‚Ä¢ <code>100 USD to EUR</code>\n"
            "‚Ä¢ <code>—É–≤–µ–¥–æ–º–∏, –µ—Å–ª–∏ BTC > 50000 to USD</code>\n\n"
            "üîò <b>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏:</b>",
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )

    return bot, dp, db, rates


async def run_bot():
    bot, dp, db, rates = await create_app()
    notifier_task = asyncio.create_task(run_notifier(bot, db, rates))
    try:
        await dp.start_polling(bot)
    finally:
        notifier_task.cancel()
        try:
            await notifier_task
        except Exception:
            pass
        await rates.close()


if __name__ == "__main__":
    asyncio.run(run_bot())


