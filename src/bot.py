from __future__ import annotations

import asyncio
from typing import Optional

from aiogram import Bot, Dispatcher, F
from aiogram.filters import Command
from aiogram.types import Message

from .config import get_settings
from .rates import RatesService
from .parser import parse_convert, parse_alert
from .db import Database
from .scheduler import run_notifier


HELP_TEXT = (
    "üîÑ <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –≤–∞–ª—é—Ç:</b>\n"
    "‚Ä¢ 100 USD to EUR ‚Äî –¥–æ–ª–ª–∞—Ä—ã –≤ –µ–≤—Ä–æ\n"
    "‚Ä¢ 50 EUR to RUB ‚Äî –µ–≤—Ä–æ –≤ —Ä—É–±–ª–∏\n"
    "‚Ä¢ 1000 RUB to UAH ‚Äî —Ä—É–±–ª–∏ –≤ –≥—Ä–∏–≤–Ω—ã\n"
    "‚Ä¢ 25 GBP to JPY ‚Äî —Ñ—É–Ω—Ç—ã –≤ –π–µ–Ω—ã\n"
    "‚Ä¢ 100 CAD to AUD ‚Äî –∫–∞–Ω–∞–¥—Å–∫–∏–µ –¥–æ–ª–ª–∞—Ä—ã –≤ –∞–≤—Å—Ç—Ä–∞–ª–∏–π—Å–∫–∏–µ\n\n"
    
    "ü™ô <b>–ö–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç:</b>\n"
    "‚Ä¢ 1 BTC to USD ‚Äî –±–∏—Ç–∫–æ–∏–Ω –≤ –¥–æ–ª–ª–∞—Ä—ã\n"
    "‚Ä¢ 10 ETH to EUR ‚Äî —ç—Ñ–∏—Ä–∏—É–º –≤ –µ–≤—Ä–æ\n"
    "‚Ä¢ 1000 USDT to RUB ‚Äî —Ç–µ–∑–µ—Ä –≤ —Ä—É–±–ª–∏\n"
    "‚Ä¢ 5 SOL to USD ‚Äî —Å–æ–ª–∞–Ω–∞ –≤ –¥–æ–ª–ª–∞—Ä—ã\n"
    "‚Ä¢ 0.5 ETH to BTC ‚Äî —ç—Ñ–∏—Ä–∏—É–º –≤ –±–∏—Ç–∫–æ–∏–Ω\n\n"
    
    "üîî <b>–ü–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ –∫—É—Ä—Å—ã:</b>\n"
    "‚Ä¢ —É–≤–µ–¥–æ–º–∏, –µ—Å–ª–∏ BTC &gt; 50000 to USD\n"
    "‚Ä¢ alert –µ—Å–ª–∏ ETH &lt; 3000 to USD\n"
    "‚Ä¢ notify –∫–æ–≥–¥–∞ SOL &gt; 100 to USD\n"
    "‚Ä¢ —É–≤–µ–¥–æ–º–∏, –µ—Å–ª–∏ RUB &gt; 80 to USD\n"
    "‚Ä¢ alert –µ—Å–ª–∏ EUR &lt; 0.8 to USD\n\n"
    
    "üìã <b>–ö–æ–º–∞–Ω–¥—ã:</b>\n"
    "‚Ä¢ /start ‚Äî –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ\n"
    "‚Ä¢ /help ‚Äî —ç—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞\n"
    "‚Ä¢ /subs ‚Äî —Å–ø–∏—Å–æ–∫ –ø–æ–¥–ø–∏—Å–æ–∫\n"
    "‚Ä¢ /unsub BTC USD ‚Äî —É–¥–∞–ª–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É\n\n"
    
    "üí° <b>–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –≤–∞–ª—é—Ç—ã:</b>\n"
    "–§–∏–∞—Ç: USD, EUR, GBP, JPY, CHF, CNY, AUD, CAD, RUB, UAH, KZT\n"
    "–ö—Ä–∏–ø—Ç–∞: BTC, ETH, USDT, BNB, XRP, SOL, TON, DOGE, TRX"
)


async def create_app():
    settings = get_settings()
    bot = Bot(token=settings.bot_token)
    dp = Dispatcher()
    db = Database(settings.database_path)
    await db.init()
    rates = RatesService(user_agent=settings.user_agent)

    @dp.message(Command("start"))
    async def start_handler(message: Message):
        welcome_text = (
            "üëã <b>–ü—Ä–∏–≤–µ—Ç! –Ø QuickConverterBot</b>\n\n"
            "–Ø –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É—é –≤–∞–ª—é—Ç—ã –∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏!\n\n"
            "üí° <b>–ë—ã—Å—Ç—Ä—ã–π —Å—Ç–∞—Ä—Ç:</b>\n"
            "‚Ä¢ –ù–∞–ø–∏—à–∏: <code>100 USD to EUR</code>\n"
            "‚Ä¢ –ü–æ–¥–ø–∏—à–∏—Å—å: <code>—É–≤–µ–¥–æ–º–∏, –µ—Å–ª–∏ BTC > 50000 to USD</code>\n\n"
            "üìö <b>–ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–ø—Ä–∞–≤–∫–∞:</b> /help"
        )
        await message.answer(welcome_text, parse_mode="HTML")

    @dp.message(Command("help"))
    async def help_handler(message: Message):
        await message.answer(HELP_TEXT, parse_mode="HTML")

    @dp.message(Command("subs"))
    async def list_subs(message: Message):
        items = await db.list_subscriptions(message.from_user.id)
        if not items:
            await message.answer("–ü–æ–¥–ø–∏—Å–æ–∫ –Ω–µ—Ç.")
            return
        lines = [
            f"{i+1}. {x['base']}/{x['quote']} {x['operator']} {x['threshold']}"
            for i, x in enumerate(items)
        ]
        await message.answer("\n".join(lines))

    @dp.message(Command("unsub"))
    async def unsub(message: Message):
        parts = message.text.split()
        if len(parts) < 3:
            await message.answer("–ò—Å–ø–æ–ª—å–∑—É–π: /unsub BTC USD")
            return
        base, quote = parts[1].upper(), parts[2].upper()
        removed = await db.remove_subscription(message.from_user.id, base, quote)
        if removed:
            await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ —É–¥–∞–ª–µ–Ω–∞.")
        else:
            await message.answer("–ü–æ–¥–ø–∏—Å–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.")

    @dp.message(F.text)
    async def text_handler(message: Message):
        text = message.text.strip()
        alert = parse_alert(text)
        if alert:
            await db.add_subscription(
                user_id=message.from_user.id,
                base=alert.base,
                quote=alert.quote,
                operator=alert.operator,
                threshold=alert.value,
            )
            await message.answer(
                f"–û–∫, —É–≤–µ–¥–æ–º–ª—é –µ—Å–ª–∏ {alert.base}/{alert.quote} {alert.operator} {alert.value}"
            )
            return

        cq = parse_convert(text)
        if cq:
            rate = await rates.get_rate(cq.base, cq.quote)
            if rate is None:
                await message.answer("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å —Å–µ–π—á–∞—Å. –ü–æ–ø—Ä–æ–±—É–π –ø–æ–∑–∂–µ.")
                return
            result = cq.amount * rate
            await message.answer(f"{cq.amount} {cq.base} = {result:.6g} {cq.quote}\n–ö—É—Ä—Å: {rate:.6g}")
            return

        await message.answer("–ù–µ –ø–æ–Ω—è–ª –∑–∞–ø—Ä–æ—Å. –ü—Ä–∏–º–µ—Ä—ã: '100 USD to EUR', '—É–≤–µ–¥–æ–º–∏, –µ—Å–ª–∏ BTC > 50000 to USD'")

    return bot, dp, db, rates


async def run_bot():
    bot, dp, db, rates = await create_app()
    notifier_task = asyncio.create_task(run_notifier(bot, db, rates))
    try:
        await dp.start_polling(bot)
    finally:
        notifier_task.cancel()
        try:
            await notifier_task
        except Exception:
            pass
        await rates.close()


if __name__ == "__main__":
    asyncio.run(run_bot())


