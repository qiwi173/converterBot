#!/usr/bin/env python3
"""
QuickConverterBot - –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
"""
import os
import sys
import asyncio
from pathlib import Path

def load_env_file():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env —Ñ–∞–π–ª–∞"""
    env_file = Path(".env")
    
    if not env_file.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("\n–°–æ–∑–¥–∞–π —Ñ–∞–π–ª .env –≤ –∫–æ—Ä–Ω–µ –ø—Ä–æ–µ–∫—Ç–∞:")
        print("BOT_TOKEN=—Ç–≤–æ–π_—Ç–æ–∫–µ–Ω_–æ—Ç_botfather")
        print("DATABASE_PATH=data/db.sqlite3")
        print("SCHEDULER_INTERVAL_SECONDS=60")
        return False
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º .env —Ñ–∞–π–ª
        from dotenv import load_dotenv
        load_dotenv()
        return True
    except ImportError:
        print("‚ùå –ú–æ–¥—É–ª—å python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏: pip install python-dotenv")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ .env: {e}")
        return False

def validate_token():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–æ–∫–µ–Ω –±–æ—Ç–∞"""
    token = os.getenv("BOT_TOKEN")
    
    if not token:
        print("‚ùå BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ!")
        return False
    
    # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–Ω–æ—Å—ã —Å—Ç—Ä–æ–∫
    token = token.strip()
    
    if len(token) < 30:
        print("‚ùå BOT_TOKEN —Å–ª–∏—à–∫–æ–º –∫–æ—Ä–æ—Ç–∫–∏–π!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–æ—Ä–º–∞—Ç —Ç–æ–∫–µ–Ω–∞ (–¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ)
    if ":" not in token:
        print("‚ùå BOT_TOKEN –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –¥–≤–æ–µ—Ç–æ—á–∏–µ (:)")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –ø–µ—Ä–≤–∞—è —á–∞—Å—Ç—å - —ç—Ç–æ —á–∏—Å–ª–æ
    try:
        bot_id = int(token.split(":")[0])
        if bot_id <= 0:
            print("‚ùå ID –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º")
            return False
    except ValueError:
        print("‚ùå ID –±–æ—Ç–∞ –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —á–∏—Å–ª–æ–º")
        return False
    
    print(f"‚úÖ –¢–æ–∫–µ–Ω –Ω–∞–π–¥–µ–Ω –¥–ª—è –±–æ—Ç–∞ ID: {bot_id}")
    return True

def check_dependencies():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏"""
    try:
        import aiogram
        import httpx
        import aiosqlite
        print("‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
        return True
    except ImportError as e:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å: {e}")
        print("–£—Å—Ç–∞–Ω–æ–≤–∏: pip install -r requirements.txt")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ QuickConverterBot - –ó–∞–ø—É—Å–∫...")
    print("=" * 50)
    
    # –®–∞–≥ 1: –ó–∞–≥—Ä—É–∂–∞–µ–º .env
    print("üìã –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    if not load_env_file():
        return 1
    
    # –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–æ–∫–µ–Ω
    print("üîë –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ–∫–µ–Ω–∞...")
    if not validate_token():
        return 1
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏
    print("üì¶ –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π...")
    if not check_dependencies():
        return 1
    
    # –®–∞–≥ 4: –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    print("ü§ñ –®–∞–≥ 4: –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
    print("üí° –î–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –Ω–∞–∂–º–∏ Ctrl+C")
    print("=" * 50)
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
        from src.bot import run_bot
        asyncio.run(run_bot())
        
    except KeyboardInterrupt:
        print("\nüëã –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        return 0
        
    except ImportError as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å, —á—Ç–æ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ")
        return 1
        
    except Exception as e:
        print(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        print("–ü—Ä–æ–≤–µ—Ä—å –ª–æ–≥–∏ –∏ –ø–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞")
        return 1
    
    return 0

if __name__ == "__main__":
    sys.exit(main())
